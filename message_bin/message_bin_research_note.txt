GFMC file format is for storing game text in KEY
A GFMC file has extension .bin, and magic "GFMC"(Good-Feel Message C?) at the begining of the file.
All data are big-endian.
The data is actually a hash table. Each piece of text (known as a 'paragraph') in the file is
identified by a 32-bit hash value (the hash input is probably its 'name', but the hash function is
unknown and the name were lost). The file consist of a file header and 4 sections following: 
(A)buckets list, (B)entries list, (C)paragraphs list, and (D)text data.
There are always 256 buckets, and paragraphs are allocated in buckets according to the lowest byte 
of their hash value.
For the same file of different launguage version, the data of section A and B is the same.
When translating, the hash table structure can be ignored, and modify only section C and D.

/* u16 means unsigned 16-bit integer */
/* u32 means unsigned 32-bit integer */

struct Header{
	u32 magic;            //="GFMC"
	u32 version?;         //Always 0x00010000
	u32 fileSize;
	u32 offsetToSectionA; //Always 0x001C
	u32 offsetToSectionB; //Always 0x081C
	u32 offsetToSectionC;
	u32 offsetToSectionD;
};
struct SectionA{ //buckets list
	struct Bucket{
		u32 entryCount;
		u32 firstEntryIndex;
		/* for a empty bucket, entryCount=firstEntryIndex;
		   otherwise firstEntryIndex=prevBucket.firstEntryIndex+prevBucket.entryCount
		   where prevBucket is the last none-empty bucket before this bucket
		*/

	}buckets[256];
};

struct SectionB{ //entry list
	struct Entry{
		u32 hash;                       //The lowest byte is always equal to 
		                                //the index of bucket containing this entry
		u32 paragraphCount?;            //Always 1
		u32 offsetToElemtentInSectionC; //Always =4*entryIndex
	}entries[...];
};

struct SectionC{ //paragraph list
	struct ParagraphInfo{
		u32 offsetToDataInSectionD;
	}paragraphs[...]; //The same size and order as entries in SectionB
}

struct SectionD{ //text data
	struct ParagraphData{
		u16 beginMagic;                  //=0x000A
		u16 ParagraphMagic;              //="PG"
		struct SubText{
			u16 beginMagic;          //=0x000A
			u16 subTextMagic;        //="TX"
			u16 zero?;               //Or the high part of subTextLength?
			u16 subTextLength;
			u16 text[subTextLength]; //coded in UTF-16BE
		}[...];                          //This size is rare to be more than 1
		u16 endMagic;                    //=0x000B
		u16 ParagraphMagic;              //="PG"
	}data[...]; //The same size as SectionC, but not in the same order(!).
	            //Element in SectionD seem to be sorted by an unknown method
	            //  (maybe according to their names?)
}


